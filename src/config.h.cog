// Configuration and configuration file handling (definition)

#ifndef CONFIG_H

#define CONFIG_H

#include "lib.h"

//
// Types
//

// System type
typedef enum {
  ST_ERROR,   // parse error
  ST_MANDB,   // `mandb`
  ST_MANDOC,  // `mandoc`
  ST_FREEBSD, // FreeBSD `man`
  ST_DARWIN   // macOS X `man`
} systype_t;

// A ternary bit, i.e. one that can take one of 3 values: `true`, `false`, or
// `auto`
typedef enum {
  t_false,
  t_true,
  t_auto
} trit_t;

// The color of a text character. Unlike ncurses colors, which are short
// integers that correspond to a color value, `colour_t` combines foreground
// color, background color, boldness, and a corresponding initialized ncurses
// color pair.
typedef struct {
  short fg;   // foreground ncurses color no.
  bool bold;  // true if foreground color is bold, false otherwise
  short bg;   // background ncurses color no.
  short pair; // ncurses color pair no.
} colour_t;

/*[[[cog

import cog
import config_def

cog.outl("// A program action")
cog.outl("typedef enum {")
cog.outl("  PA_NULL,                       // Do nothing (must be first member of `action_t`)")

for option, option_def in config_def.config_def["keys"].items():
  (type, default_value, in_config, comment) = option_def

  if option == "quit":
    comma = " "
  else:
    comma = ","
  cog.outl("  {:30s} // {}".format("PA_" + option.upper() + comma, comment))

cog.outl("} action_t;")
cog.outl()

for section, options in config_def.config_def.items():
  cog.outl("// Configuration structure for section `" + section + "`")

  # Section "keys" is special and is defined as an array, not a structure
  if section == "keys":
    cog.outl("typedef int config_keys_t[PA_QUIT + 1][8];")
    cog.outl()
    continue

  # All other sections are defined as structures
  cog.outl("typedef struct {")
  first_option = True
  for option, option_def in options.items():
    if first_option:
      first_option = False
    else:
      cog.outl()

    (type, default_value, in_config, comment) = option_def

    cog.outl("  // " + comment)

    if type[0] == "bool":
      cog.outl("  bool " + option + ";")
    elif type[0] == "int":
      cog.outl("  unsigned " + option + ";")
    elif type[0] == "systype":
      cog.outl("  systype_t " + option + ";")
    elif type[0] == "trit":
      cog.outl("  trit_t " + option + ";")
    elif type[0] == "string":
      cog.outl("  char *" + option + ";")
    elif type[0] == "wstring":
      cog.outl("  wchar_t *" + option + ";")
    elif type[0] == "colour":
      cog.outl("  colour_t " + option + ";")
    else:
      raise NameError("Unknown type '{}' for option '{}'".format(type[0], option))

  cog.outl("} config_" + section + "_t;")
  cog.outl()

cog.outl("// Main configuration structure");
cog.outl("typedef struct {");
for section, options in config_def.config_def.items():
  cog.outl("  config_" + section + "_t " + section + ";")
cog.outl("} config_t;");

]]]

[[[end]]]*/

//
// Constants
//

// Alternate configuration file locations
#define CONFIG_PATHS [ "~/.config/qman.conf", "/etc/xdg/qman.conf" ]

//
// Global variables
//

// Program configuration
extern config_t config;

// String representations for program actions
extern const char *keys_names[PA_QUIT + 1];

// Help text for program actions and their corresponding key character mappings
extern const wchar_t *keys_help[PA_QUIT + 1];

//
// Functions
//

// Initialize configuration to sane defaults
extern void conf_init();

// Locate and parse the configuration file, setting all members of `config`
// appropriately
extern void configure();

#endif
